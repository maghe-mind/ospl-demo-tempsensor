#include "ChangeLog_DCPS.hpp"

#include <v_copyIn.h>
#include <v_topic.h>
#include <os_stdlib.h>
#include <string.h>
#include <os_report.h>

v_copyin_result
__Mind_ChangeItem__copyIn(
    c_base base,
    const class ::Mind::ChangeItem *from,
    struct _Mind_ChangeItem *to)
{
    v_copyin_result result = V_COPYIN_RESULT_OK;
    (void) base;

#ifdef OSPL_BOUNDS_CHECK
        to->UUID = c_stringNew_s(base, from->UUID_.c_str());
        if(to->UUID == NULL) {
            result = V_COPYIN_RESULT_OUT_OF_MEMORY;
        }
#else
            to->UUID = c_stringNew_s(base, from->UUID_.c_str());
            if(to->UUID == NULL) {
                result = V_COPYIN_RESULT_OUT_OF_MEMORY;
            }
#endif
#ifdef OSPL_BOUNDS_CHECK
    if((((c_long)from->type_) >= 0) && (((c_long)from->type_) < 2) ){
        to->type = (enum _Mind_ChangeItemType)from->type_;
    } else {
        OS_REPORT (OS_ERROR, "copyIn", 0,"Member 'Mind::ChangeItem.type' of type 'ChangeItemType' is out of range.");
        result = V_COPYIN_RESULT_INVALID;
    }
#else
    to->type = (enum _Mind_ChangeItemType)from->type_;
#endif
#ifdef OSPL_BOUNDS_CHECK
    if((((c_long)from->action_) >= 0) && (((c_long)from->action_) < 3) ){
        to->action = (enum _Mind_ChangeItemAction)from->action_;
    } else {
        OS_REPORT (OS_ERROR, "copyIn", 0,"Member 'Mind::ChangeItem.action' of type 'ChangeItemAction' is out of range.");
        result = V_COPYIN_RESULT_INVALID;
    }
#else
    to->action = (enum _Mind_ChangeItemAction)from->action_;
#endif
    return result;
}

v_copyin_result
__Mind_ChangeLog__copyIn(
    c_base base,
    const class ::Mind::ChangeLog *from,
    struct _Mind_ChangeLog *to)
{
    v_copyin_result result = V_COPYIN_RESULT_OK;
    (void) base;

#ifdef OSPL_BOUNDS_CHECK
        to->UUID = c_stringNew_s(base, from->UUID_.c_str());
        if(to->UUID == NULL) {
            result = V_COPYIN_RESULT_OUT_OF_MEMORY;
        }
#else
            to->UUID = c_stringNew_s(base, from->UUID_.c_str());
            if(to->UUID == NULL) {
                result = V_COPYIN_RESULT_OUT_OF_MEMORY;
            }
#endif
    to->timestamp = (c_long)from->timestamp_;
#ifdef OSPL_BOUNDS_CHECK
    if((((c_long)from->itemType_) >= 0) && (((c_long)from->itemType_) < 2) ){
        to->itemType = (enum _Mind_ChangeItemType)from->itemType_;
    } else {
        OS_REPORT (OS_ERROR, "copyIn", 0,"Member 'Mind::ChangeLog.itemType' of type 'ChangeItemType' is out of range.");
        result = V_COPYIN_RESULT_INVALID;
    }
#else
    to->itemType = (enum _Mind_ChangeItemType)from->itemType_;
#endif
#ifdef OSPL_BOUNDS_CHECK
    if((((c_long)from->changeLogType_) >= 0) && (((c_long)from->changeLogType_) < 3) ){
        to->changeLogType = (enum _Mind_ChangeLogType)from->changeLogType_;
    } else {
        OS_REPORT (OS_ERROR, "copyIn", 0,"Member 'Mind::ChangeLog.changeLogType' of type 'ChangeLogType' is out of range.");
        result = V_COPYIN_RESULT_INVALID;
    }
#else
    to->changeLogType = (enum _Mind_ChangeLogType)from->changeLogType_;
#endif
    {
/* Code generated by /home/dds/OvernightTests/overnight/ospli/heads/OSPL_V6_8-02-branch/ubuntu1604-64a/x86_64.linux-release-inner/build/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 826 */

        static c_type type0 = NULL;
        c_type subtype0;
        c_ulong length0;
        struct _Mind_ChangeItem *dest0;
        const ::Mind::ChangeLog::_changes_seq *src = &from->changes_;

        if (type0 == NULL) {
            subtype0 = c_type(c_metaResolve (c_metaObject(base), "Mind::ChangeItem"));
            type0 = c_metaSequenceTypeNew(c_metaObject(base),"C_SEQUENCE<Mind::ChangeItem>",subtype0,0);
            c_free(subtype0);
        }
        length0 = (c_ulong)(*src).size();
#ifdef OSPL_BOUNDS_CHECK
         dest0 = (struct _Mind_ChangeItem *)c_newSequence_s(c_collectionType(type0),length0);
         if(dest0 != NULL) {
            /* Code generated by /home/dds/OvernightTests/overnight/ospli/heads/OSPL_V6_8-02-branch/ubuntu1604-64a/x86_64.linux-release-inner/build/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 2080 */
            unsigned int i0;
            for (i0 = 0; (i0 < length0) && V_COPYIN_RESULT_IS_OK(result); i0++) {
                extern v_copyin_result __Mind_ChangeItem__copyIn(c_base base,
                    const Mind::ChangeItem *From,
                    struct _Mind_ChangeItem *To);

                result = __Mind_ChangeItem__copyIn(base, &(*src)[i0], (struct _Mind_ChangeItem *)&dest0[i0]);
            }
            to->changes = (c_sequence)dest0;
         } else {
             result = V_COPYIN_RESULT_OUT_OF_MEMORY;
          }
#else
        dest0 = (struct _Mind_ChangeItem *)c_newSequence_s(c_collectionType(type0),length0);
        if(dest0 != NULL) {
            /* Code generated by /home/dds/OvernightTests/overnight/ospli/heads/OSPL_V6_8-02-branch/ubuntu1604-64a/x86_64.linux-release-inner/build/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 2080 */
            unsigned int i0;
            for (i0 = 0; (i0 < length0) && V_COPYIN_RESULT_IS_OK(result); i0++) {
                extern v_copyin_result __Mind_ChangeItem__copyIn(c_base base,
                    const Mind::ChangeItem *From,
                    struct _Mind_ChangeItem *To);

                result = __Mind_ChangeItem__copyIn(base, &(*src)[i0], (struct _Mind_ChangeItem *)&dest0[i0]);
            }
            to->changes = (c_sequence)dest0;
        } else {
            result = V_COPYIN_RESULT_OUT_OF_MEMORY;
        }
#endif
    }
    return result;
}

void
__Mind_ChangeItem__copyOut(
    const void *_from,
    void *_to)
{
    const struct _Mind_ChangeItem *from = (const struct _Mind_ChangeItem *)_from;
    class ::Mind::ChangeItem *to = (class ::Mind::ChangeItem *)_to;
    to->UUID(from->UUID ? from->UUID : "");
    to->type((::Mind::ChangeItemType)from->type);
    to->action((::Mind::ChangeItemAction)from->action);
}

void
__Mind_ChangeLog__copyOut(
    const void *_from,
    void *_to)
{
    const struct _Mind_ChangeLog *from = (const struct _Mind_ChangeLog *)_from;
    class ::Mind::ChangeLog *to = (class ::Mind::ChangeLog *)_to;
    to->UUID(from->UUID ? from->UUID : "");
    to->timestamp((int32_t)from->timestamp);
    to->itemType((::Mind::ChangeItemType)from->itemType);
    to->changeLogType((::Mind::ChangeLogType)from->changeLogType);
    {
        long size0;
        const struct _Mind_ChangeItem *src0 = (const struct _Mind_ChangeItem *)from->changes;
        std::vector< ::Mind::ChangeItem > *dst = &to->changes();

        size0 = c_arraySize(c_sequence(from->changes));
        to->changes().resize(size0);
        {
            long i0;
            for (i0 = 0; i0 < size0; i0++) {
        extern void __Mind_ChangeItem__copyOut(const void *from, void *to);
                __Mind_ChangeItem__copyOut((const void *)&src0[i0], (void *)&(*dst)[i0]);
            }
        }
    }
}

